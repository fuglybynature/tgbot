import logging
import os
import asyncio
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes
from apscheduler.schedulers.background import BackgroundScheduler

from match_checker import get_next_matches
from transfers_checker import fetch_transfers
from youtube_checker import check_new_videos

from match_reminder import (
    schedule_match_command,
    list_reminders_command,
    remove_reminder_command,
    scheduler
)

from openai import AsyncOpenAI

client = AsyncOpenAI()

TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
CHAT_ID = os.getenv("CHAT_ID")

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO
)
logger = logging.getLogger(__name__)


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.info(f"/start command received from user {update.effective_user.id}")
    welcome_text = (
        "üëã –í—ñ—Ç–∞—é! –î–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:\n"
        "/start ‚Äî –ü–æ–∫–∞–∑–∞—Ç–∏ —Ü–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è\n"
        "/help ‚Äî –î–æ–ø–æ–º–æ–≥–∞\n"
        "/nextmatch <–∫–æ–º–∞–Ω–¥–∞> ‚Äî –ü–æ–∫–∞–∑–∞—Ç–∏ –Ω–∞—Å—Ç—É–ø–Ω—ñ –º–∞—Ç—á—ñ –¥–ª—è –∫–æ–º–∞–Ω–¥–∏\n"
        "/transfers ‚Äî –ü–æ–∫–∞–∑–∞—Ç–∏ –æ—Å—Ç–∞–Ω–Ω—ñ —Ç—Ä–∞–Ω—Å—Ñ–µ—Ä–∏\n"
        "/ask <–ø–∏—Ç–∞–Ω–Ω—è> ‚Äî –ó–∞–ø–∏—Ç–∞—Ç–∏ —â–æ—Å—å —É –®–Ü\n"
        "/match <–¥–∞—Ç–∞> <—á–∞—Å> <–∫–æ–º–µ–Ω—Ç–∞—Ä> ‚Äî –î–æ–¥–∞—Ç–∏ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –∑–∞ 30 —Ö–≤ –¥–æ –º–∞—Ç—á—É\n"
        "/listreminders ‚Äî –ü–æ–∫–∞–∑–∞—Ç–∏ –≤—Å—ñ –∑–∞–ø–ª–∞–Ω–æ–≤–∞–Ω—ñ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è\n"
        "/removereminder <ID> ‚Äî –í–∏–¥–∞–ª–∏—Ç–∏ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –∑–∞ ID"
    )
    await update.message.reply_text(welcome_text)


async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.info(f"/help command received from user {update.effective_user.id}")
    await start(update, context)


async def nextmatch(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.info(f"/nextmatch command received with args: {context.args} from user {update.effective_user.id}")
    if not context.args:
        await update.message.reply_text("–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –∫–æ–º–∞–Ω–¥–∏. –ü—Ä–∏–∫–ª–∞–¥: /nextmatch Chelsea")
        return

    team_name = " ".join(context.args)
    matches = get_next_matches(team_name)

    if not matches:
        logger.info(f"No upcoming matches found for team '{team_name}'")
        await update.message.reply_text(f"–ù–µ–º–∞—î –∑–∞–ø–ª–∞–Ω–æ–≤–∞–Ω–∏—Ö –º–∞—Ç—á—ñ–≤ –¥–ª—è {team_name}.")
        return

    response = ""
    for m in matches:
        response += f"{m['date']} {m['time']} ‚Äî {m['home']} vs {m['away']} ({m['league']})\n"

    await update.message.reply_text(response.strip())
    logger.info(f"Sent next matches info for team '{team_name}'")


async def transfers_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logging.info(f"/transfers command received from user {update.effective_user.id}")
    message = fetch_transfers(limit=10)
    if not message:
        logging.info("No transfers found matching filter on /transfers command")
        await update.message.reply_text("‚ö†Ô∏è –ù–µ–º–∞—î —Ç—Ä–∞–Ω—Å—Ñ–µ—Ä—ñ–≤, —â–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—é—Ç—å —Ñ—ñ–ª—å—Ç—Ä—É.")
        return
    await update.message.reply_text(message, parse_mode='Markdown')
    logging.info("Sent transfers message in /transfers command")


async def ask_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.info(f"/ask command received from user {update.effective_user.id} with args: {context.args}")
    if not context.args:
        await update.message.reply_text("–í–≤–µ–¥—ñ—Ç—å –ø–∏—Ç–∞–Ω–Ω—è. –ü—Ä–∏–∫–ª–∞–¥: /ask –©–æ —Ç–∞–∫–µ –æ—Ñ—Å–∞–π–¥?")
        return

    prompt = " ".join(context.args)

    try:
        response = await client.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=[{"role": "user", "content": prompt}],
            max_tokens=500,
            temperature=0.7,
        )
        reply_text = response.choices[0].message.content.strip()
    except Exception as e:
        logger.error(f"OpenAI error: {e}")
        reply_text = "‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–≤–µ—Ä–Ω–µ–Ω–Ω—ñ –¥–æ OpenAI."

    await update.message.reply_text(reply_text)


# üîß –û–±–≥–æ—Ä—Ç–∫–∞ –¥–ª—è YouTube –ø–µ—Ä–µ–≤—ñ—Ä–æ–∫
def run_youtube_check():
    asyncio.run(check_new_videos())


def main():
    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help_command))
    app.add_handler(CommandHandler("nextmatch", nextmatch))
    app.add_handler(CommandHandler("transfers", transfers_command))
    app.add_handler(CommandHandler("ask", ask_command))

    # –ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è
    app.add_handler(CommandHandler("match", schedule_match_command))
    app.add_handler(CommandHandler("listreminders", list_reminders_command))
    app.add_handler(CommandHandler("removereminder", remove_reminder_command))

    logger.info("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ...")

    scheduler.start()
    scheduler.add_job(run_youtube_check, "interval", hours=3)

    app.run_polling()


if __name__ == "__main__":
    main()
